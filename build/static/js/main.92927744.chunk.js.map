{"version":3,"sources":["Home.js","logs/log_0000.js","logs/log_0001.js","logs/log_0002.js","logs/index.js","AltaTerminal.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","href","React","Component","log_0000_pre","log_0000","log_0001_pre","log_0001","log_0002_pre","log_0002","count","AltaTerminal","body","defaultState","EmulatorState","createEmpty","defaultHistory","getHistory","customHistory","History","recordCommand","normOutStyles","color","whiteSpace","fontSize","lineHeight","fontFamily","ASCIIArtStyles","catLogStyles","createNormOutRecord","OutputFactory","OutputRecord","type","content","altaTitleArt","altaWelcomeMsg0","altaWelcomeMsg1","altaWelcomeMsg2","altaWelcomeMsg3","customOutputs","Outputs","create","altaFSObj","fsObj","canModify","i","logs","i_str","padStart","createLogs","altaFS","FileSystem","altaCommandMapping","CommandMapping","defaultCommandMapping","state","opts","output","fileToTextOutput","fs","filePath","FileOp","readFile","err","file","makeErrorOutput","fileContent","get","length","substring","pre","createCatLogRecord","cwd","EnvironmentVariables","getEnvironmentVariable","getEnvVariables","path","outputs","map","filename","getFileSystem","defaultEnvVariables","altaEnvVariables","setEnvironmentVariable","emulatorState","setHistory","setOutputs","setFileSystem","setEnvVariables","setCommandMapping","outputRenderers","ReactOutputRenderers","style","theme","ReactThemes","hacker","height","spacing","promptSymbol","clickToFocus","App","basename","to","activeClassName","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92927744.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nclass Home extends React.Component {\n\nrender() {\n  return (\n    <div className=\"Home\">\n      <h1>the alta files</h1>\n      <br />\n      <hr />\n      <h3>2020-05-29</h3>\n      <p>\n        I found a weird data stream on the Internet. Well, I'm not sure if \"on the Internet\" is the way to describe it. There's this antenna that my friend Don and I have been tinkering with for a while. We started out wanting to understand how signals work at a low level. My friend built the thing (I'm not much of a hardware guy), and we work together on the signal processing. A few days ago, we started picking up some signals that we haven't seen documented before. We haven't been able to trace their physical emitter. We are still novices when it comes to those particular network measurements, though, so maybe someone who is better at that stuff can figure it out. I'm just going to focus on the data itself for now and for the foreseeable future.\n      </p>\n      <p>\n        The signal form isn't like anything we have seen before...I guess that isn't saying much because we are hardly signal processing experts, but some googling tells us it also isn't like anything the Internet has seen before. It looks weird to us at a ~fundamental~ level. It seems like it isn't binary...we can't find an existing protocol to code the raw data into just ones and zeroes--at least, not yet. It's completely functional? I'm not sure if that's the right word for it. I'm still searching for a way to describe the form of information we are sensing. \n      </p>\n      <br />\n      <hr />\n      <h3>2020-06-09</h3>\n      <p>\n        Okay, we've managed to throw together a protocol to interpret these signals. It does not feel like a very robust protocol, but Don seems to think it will hold up. He did most of the work on it, so I trust him. This protocol is like a lens into this underlying signal, right?\n      </p>\n      <p>\n        I'm just having a hard time coming to terms with what this lens is revealing. \n      </p>\n      <br />\n      <hr />\n      <h3>2020-06-11</h3>\n      <p>\n        We haven't gotten anywhere useful with this data. I think I am spiraling out of reality the more I keep this between just the two of us. Don thinks I am insane for doing this, but I wanted to publish the data (alongside these personal journal entries) on the Internet in the hopes that someone else can provide some insight or at least share my fascination. \n      </p>\n      <p>\n        The data seems like it is a set of files on someone's computer. It's always changing and feels like the computer itself could crash, but it also feels beautifully stable. I have been able to open a connection to the source through an emulated computer terminal. It's not a complete terminal by any means, but thanks to <a href=\"https://github.com/rohanchandra/react-terminal-component/\">rohanchandra</a>, I was able to spin up a simple version pretty quickly. It feels like the purest way to share this information right now. It doesn't look like a pretty squarespace website, but it is certainly not supposed to because it is mostly log files. All will be left as plaintext, but I might add some higher level enrichment to the data over time as this thing develops. You'll see when you access the files.\n      </p>\n      <p>\n        All the data is timestamped, and it aligns with present days and times. But here's the thing: the year is stamped 64 years from now.\n      </p>\n      <p>\n        I think I found a wormhole that opens to some future slice of spacetime. I don't know how I found it, but I am trying to find out what I can do with it. Other people are going to have to find out how I got to it, where it physically is, whose it is, etc. All that isn't my specialty. I'm more on the human/software side.\n      </p>\n      <p>\n        I know it's crazy. Just pick up the data. It might become clearer if you start working with it. More than anything, I want someone to convince me that this is not what I think it is.\n      </p>\n      <p>\n        It's like we can open an SSH tunnel into the future. Maybe the other terminal is in a location around me, maybe it's not. Thinking about what physical location means when trying to consider the time dimension is a bit too much for me right now, so I'll leave it at that.\n      </p>\n      <p>\n        If you've used a computer command line application before, you will be able to figure things out quickly and will likely be disappointed by the lack of terminal features you're used to (sorry). If you haven't, type `help` to get a list of commands. The ones you will use most are:\n      </p>\n      <table>\n        <thead>\n          <tr>\n            <th>command</th>\n            <th>meaning/function</th>\n            <th>example</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>ls</td>\n            <td>list files and directories</td>\n            <td>`ls` lists the contents of the current directory you are working in. `ls logs` lists the contents of the <b>logs</b> directory.</td>\n          </tr>\n          <tr>\n            <td>cd</td>\n            <td>change directory (folder)</td>\n            <td>`cd logs` changes the working directory to the <b>logs</b> directory. `cd ..` changes the working directory to the current directory's parent directory.</td>\n          </tr>\n          <tr>\n            <td>pwd</td>\n            <td>print working directory</td>\n            <td>`pwd` prints the directory you are currently working in. This command can be a useful sanity check as you navigate the hierarchical file structure.</td>\n          </tr>\n          <tr>\n            <td>cat</td>\n            <td>output file contents</td>\n            <td>`cat log_0000` will output the contents of <b>log_0000</b> to the terminal.</td>\n          </tr>\n        </tbody>\n      </table>\n      <p>\n        Click on the <a href=\"./terminal\">terminal tab</a> to begin.\n      </p>\n      <p>\n        Maybe someone reading this can find something I can't. As always, feedback and collaboration ideas are appreciated. Feel free to ping me.\n      </p>\n    </div>\n  );\n  }\n}\n\nexport default Home;","export const log_0000_pre = `\\\r\n---\r\nLOG_0000\r\nEPOCH TIMESTAMP 3610408091 (2084-05-28 21:08:11 GMT-06:00)\r\nLOGGED WITH ALTA_IE v0.0\r\n---\r\n`;\r\n\r\nexport const log_0000 = `\\\r\n\\\r\n<LOADCONFIG src=\"/etc/alta/safemode/conf\"> <BEGINTRANSCRIBE> testing <STOP> testing modified alta device version 0 <STOP> we'll call it alta for isolated environments <STOP> alta ie for short <STOP> not like this software is ever going to run anywhere else because that would defeat the purpose of this software being totally isolated from the rest of the world <STOP> okay this concludes first testing of alta ie deployed in my personal lab <STOP> will evaluate transcription capabilities to make sure oem alta is running fine in zero config with my modifications <STOP> out <STOP> <FULLSTOP>\r\n\\n\\\r\n`;","export const log_0001_pre = `\\\n---\nLOG_0001\nEPOCH TIMESTAMP 3610487112 (2084-05-29 19:05:12 GMT-06:00)\nLOGGED WITH ALTA_IE v0.0\n---\n`;\n\nexport const log_0001 = `\\\n\\\n<LOADCONFIG src=\"/home/.altaconfig\"> alright everything seems to work in zero config. i made a simple config that loads after all default settings and overrides some of them. it is in the device home directory. right now it just does a simple translate of the stop xml into a period and turns off some of the extra alta features. i think this will let me bring this alta out of safe mode in well a safe way. at some point i will turn on more grammar features. for example detecting the placement of commas and capitalizing the first word in sentences and placing paragraph breaks. there are some other linguistic stuff i can turn on to make it all more human readable and maybe even capture speech intent. at some point. but first i need to make sure that those features are only using models stored locally on my alta device and do not attempt to ping the internet. as the name of this thing suggests it obviously has the capability to use some pretty sophisticated artificial intelligence. but if i were developing this kind of thing for a mega corporation i would have to connect it to some servers to track and link data et cetera. especially codifying human intent. that would be worth its file size in rhodium for a corporation. i just wish the internet connection part were some setting i can turn on and off. but i guess that connection is genetic to those kinds of functions. out. <FULLSTOP>\n\\n\\\n`;","export const log_0002_pre = `\\\n---\nLOG_0002\nEPOCH TIMESTAMP 3610494952 (2084-05-29 21:15:52 GMT-06:00)\nLOGGED WITH ALTA_IE v0.1\n---\n`;\n\nexport const log_0002 = `\\\n\\\nAlright! That didn't take very long. I'm confident this thing isn't trying to ping anywhere. The necessary tweaks were actually pretty easy to find and implement in the decompiled source code. I suppose taking these steps was a little excessive given this lab is Farraday'd as solidly as the lab I work in. Anyway, it is enough for me to take this device out of safemode. I've always thought that \"safemode\" denomination is a little...off. How can someone feel safe in safemode? \n\nSecurity work is done for now. It looked like those fancy linguistic features all have some interaction with the internet, and they are useless without a connection. I was able to load in some custom AI models I had lying around from the early days of ALTA development--before it was even called an ALTA. My team made some that work really quite well and should meet my needs. After all, I'm not trying to talk to anyone or anything with this device. So, those models are all saved locally.\n\nI updated the repo release to be v0.1. Not like this thing will have any kind of release, but it will be useful to keep track of the timeline here. \n\nout.\n\\n\\\n`;","export * from './log_0000';\nexport * from './log_0001';\nexport * from './log_0002';\n\nexport const count = 3;","import React, {Component} from 'react';\nimport './App.css';\nimport ReactTerminal, { ReactOutputRenderers, ReactThemes } from 'react-terminal-component';\n\nimport {\n  History, OutputFactory, Outputs, EmulatorState, FileSystem, CommandMapping, defaultCommandMapping, FileOp, EnvironmentVariables\n} from 'javascript-terminal';\n\nimport * as logs from './logs';\n\n// const fs = require('browserify-fs'); \n\n\nclass AltaTerminal extends Component {\n\n  render() {\n\n    const defaultState = EmulatorState.createEmpty();\n    const defaultHistory = defaultState.getHistory();\n\n    const customHistory = History.recordCommand(defaultHistory, 'history -c');\n\n    const NORMOUT_TYPE = 'normout';\n    const ART_TYPE = 'art';\n    const CATLOG_TYPE = 'catlog';\n\n    const normOutStyles = {\n      color: '#0f0D',\n      whiteSpace: 'normal',\n      fontSize: '1rem',\n      lineHeight: '1rem',\n      fontFamily: 'Ubuntu Mono, monospace'\n    };\n\n    const ASCIIArtStyles = {\n      color: 'cyan',\n      whiteSpace: 'pre',\n      fontSize: '0.85rem',\n      lineHeight: '0.85rem',\n      fontFamily: 'Ubuntu Mono, monospace'\n    }\n\n    const catLogStyles = {\n      color: '#0ff9',\n      whiteSpace: 'normal',\n      fontSize: '1rem',\n      lineHeight: '1rem',\n      fontFamily: 'Ubuntu Mono, monospace'\n    }\n\n    const ArtOutput = ({ content }) => (\n      <div style={ASCIIArtStyles}>\n       {content.body}\n      </div>\n    );\n\n    const CatLogOutput = ({ content }) => (\n      <div>\n        <div style={catLogStyles}>\n          {/* <a href=\"https://google.com\">CLICK</a> */}\n          {content.pre}\n        </div>\n        <div style={normOutStyles}>\n          {content.body}\n        </div>\n      </div>\n    );\n\n    const createArtRecord = (body) => {\n      return new OutputFactory.OutputRecord({\n        type: ART_TYPE,\n        content: { body }\n      });\n    };\n\n    const NormOutput = ({ content }) => (\n      <div style={normOutStyles}>\n       {content.body}\n      </div>\n    );\n\n    const createNormOutRecord = (body) => {\n      return new OutputFactory.OutputRecord({\n        type: NORMOUT_TYPE,\n        content: { body }\n      });\n    };\n\n    const createCatLogRecord = (pre, body) => {\n      return new OutputFactory.OutputRecord({\n        type: CATLOG_TYPE,\n        content: { pre, body }\n      });\n    };\n    \n    let altaTitleArt = createArtRecord(\n      `\\\n       ___           ___                     ___     \n      /  /\\\\         /  /\\\\      ___          /  /\\\\    \n     /  /::\\\\       /  /:/     /__/\\\\        /  /::\\\\   \n    /  /:/\\\\:\\\\     /  /:/      \\\\  \\\\:\\\\      /  /:/\\\\:\\\\  \n   /  /::\\\\ \\\\:\\\\   /  /:/        \\\\__\\\\:\\\\    /  /::\\\\ \\\\:\\\\ \n  /__/:/\\\\:\\\\_\\\\:\\\\ /__/:/         /  /::\\\\  /__/:/\\\\:\\\\_\\\\:\\\\\n  \\\\__\\\\/  \\\\:\\\\/:/ \\\\  \\\\:\\\\        /  /:/\\\\:\\\\ \\\\__\\\\/  \\\\:\\\\/:/\n       \\\\__\\\\::/   \\\\  \\\\:\\\\      /  /:/__\\\\/      \\\\__\\\\::/ \n       /  /:/     \\\\  \\\\:\\\\    /__/:/           /  /:/  \n      /__/:/       \\\\  \\\\:\\\\   \\\\__\\\\/           /__/:/   \n      \\\\__\\\\/         \\\\__\\\\/                   \\\\__\\\\/ \n   `);\n\n    const altaWelcomeMsg0 = createNormOutRecord(`ALTA Linguistic Transcription and Annotation device`);\n    const altaWelcomeMsg1 = createNormOutRecord(`Release: v12.12-beta`);\n    const altaWelcomeMsg2 = createNormOutRecord(`Fork: for use in Isolated Environments, v0.1`);\n    const altaWelcomeMsg3 = createNormOutRecord(`Booted in developer mode.`);\n    \n    const customOutputs = Outputs.create([altaTitleArt, altaWelcomeMsg0, altaWelcomeMsg1, altaWelcomeMsg2, altaWelcomeMsg3]);\n\n    const createLogs = () => {\n\n      const altaConfigContent = `{\n  \"LOG_STOP_TAG\" : \"STOP\",\n  \"LOG_DEBUG_TAGS\" : true,\n  \"USE_TRANSCRIPTION\" : true,\n  \"USE_HYPERLINKING\" : true,\n  \"USE_BASIC_GRAMMAR\" : true,\n  \"USE_INTENT_CAPTURE\" : true,\n  \"USE_INTENT_ENHANCED_GRAMMAR\" : true,\n  \"USE_CUSTOM_MODELS\" : false,\n  \"CUSOM_MODEL_DIR\" : NULL,\n  \"SAFEMODE\" : true\n}`;\n\n      const altaConfigOverrides = `{\n  \"LOG_STOP_TAG\" : \"\\\\b.\",\n  \"LOG_DEBUG_TAGS\" : true,\n  \"USE_TRANSCRIPTION\" : false,\n  \"USE_HYPERLINKING\" : false,\n  \"USE_GRAMMAR\" : false,\n  \"USE_INTENT_CAPTURE\" : false,\n  \"USE_CUSTOM_MODELS\" : true,\n  \"CUSTOM_MODEL_DIR\" : \"/bin/altamodels/\",\n  \"SAFEMODE\" : false\n}`;\n\n      let fsObj = {\n        '/README.txt': { content: 'You are accessing your A.L.T.A. in developer mode. I sure hope you know what you are doing. Try not to break anything!', canModify: true },\n        '/home': { },\n        '/logs': { },\n        '/etc/alta/safemode/conf': { content: altaConfigContent, canModify: false },\n        '/home/.altaconfig': { content: altaConfigOverrides, canModify: false },\n        '/bin/altamodels/basic_grammar.ling': { content: 'UNREADABLE', canModify: false },\n        '/bin/altamodels/intent_capture.ling': { content: 'UNREADABLE', canModify: false },\n        '/bin/altamodels/intent_enhanced_grammar.ling': { content: 'UNREADABLE', canModify: false }\n      };\n\n      for (let i = 0; i < logs.count; i++) {\n        let i_str = i + '';\n        i_str = i_str.padStart(4, '0');\n        fsObj['/logs/log_' + i_str] = { content: logs['log_' + i_str + '_pre'] + logs['log_' + i_str]}\n      }\n      return fsObj;\n    }\n\n    const altaFSObj = createLogs();\n\n    let altaFS = FileSystem.create(altaFSObj);\n\n    const altaCommandMapping = CommandMapping.create({\n      ...defaultCommandMapping,\n      'help': {\n        \n        'function': (state, opts) => {\n          const helpOutput = `\\\nAvailable commands:\n> cat [FILE1] [FILE2] ... : Output the contents of [FILE1], [FILE2], ... to terminal.\n> cd [DIR]: Change working directory to [DIR].\n> clear: Clear all terminal output.\n> cp [SOURCE] [DEST]: Copy [SOURCE] file into [DEST], where [DEST] is a file or directory.\n> echo [TEXT]: Output [TEXT] to terminal.\n> head [FILE]: Output first lines of [FILE] to terminal. Run with -n <n> or --lines <n> to output the first <n> lines of [FILE].\n> history: Display history of commands entered. Run with -c or --clear to clear history.\n> ls: List the contents of the current working directory. Run with a directory name to list its contents. Run with -a to list files and directories normally hidden from this command, or with --almost-all to leave out links to the current directory and parent directory.\n> mkdir [DIR]: Create a folder named [DIR] in the current working directory.\n> printenv: Print environment variables and associated values. Run with [ENV] to print the value of [ENV] environment variable.\n> pwd: Print current working directory.\n> rm [TARGET]: Delete [TARGET], a directory or file. Run with -r or --recursive if [TARGET] is a directory. Run with --no-preserve-root if deleting root directory (EXERCISE CAUTION).\n> rmdir [DIR]: Delete [DIR], an empty directory.\n> tail [FILE]: Output last lines of [FILE] to terminal. Run with -n <n> or --lines <n> to output the last <n> lines of [FILE].\n> touch [FILE]: Create empty [FILE] in current working directory.\n> whoami: Answer the critical question.\n\n> help: Display available command info.\n          `;\n          \n          return {\n            output: createNormOutRecord(helpOutput)\n          };\n        },\n        'optDef': {}\n      },\n      'cat': {\n        'function': (state, opts) => {\n          const fileToTextOutput = (fs, filePath) => {\n            const {err, file} = FileOp.readFile(fs, filePath);\n            if (err) {\n              return OutputFactory.makeErrorOutput(err);\n            };\n\n            const fileContent = file.get('content');\n            if (fileContent === 'UNREADABLE') {\n              return OutputFactory.makeErrorOutput(err);\n            }\n            else if (fileContent.length > 7 && fileContent.substring(4, 7) === 'LOG') {\n              const filePre = fileContent.substring(0, 101);\n              const logText = fileContent.substring(101);\n              return createCatLogRecord(filePre, logText);\n            }\n            else {\n              return createNormOutRecord(fileContent);\n            }\n          };\n          if (opts.length === 0) {\n            return {};\n          }\n\n          const cwd = EnvironmentVariables.getEnvironmentVariable(state.getEnvVariables(), 'cwd');\n          // Getting cwd env variable does not append a '/' if not at root, so need to append it.\n          const path = cwd === '/' ? cwd : cwd + '/';\n\n          return {\n            outputs: opts.map(filename => fileToTextOutput(state.getFileSystem(), path + filename))\n          };\n        },\n        'optDef': {}\n      }\n    });\n    \n    const defaultEnvVariables = defaultState.getEnvVariables();\n    const altaEnvVariables = EnvironmentVariables.setEnvironmentVariable(\n      defaultEnvVariables, 'user', 'no_one'\n    );\n      \n    const emulatorState = defaultState\n                          .setHistory(customHistory)\n                          .setOutputs(customOutputs)\n                          .setFileSystem(altaFS)\n                          .setEnvVariables(altaEnvVariables)\n                          .setCommandMapping(altaCommandMapping);\n\n    return (\n      <div className=\"AltaTerminal\">\n        <ReactTerminal \n          emulatorState={emulatorState}\n          outputRenderers={{\n            ...ReactOutputRenderers,\n            [NORMOUT_TYPE]: NormOutput,\n            [ART_TYPE]: ArtOutput,\n            [CATLOG_TYPE]: CatLogOutput\n          }}\n          theme={{\n            ...ReactThemes.hacker, \n            height: '100vh', \n            spacing: '0',\n            fontSize: '1rem',\n            fontFamily: 'Ubuntu Mono, monospace'\n          }}\n          promptSymbol=\">\"\n          clickToFocus\n          className=\"term\" />\n      </div>\n    );\n  }\n}\n\nexport default AltaTerminal;\n","import React, {Component} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink\n} from \"react-router-dom\";\n\n// import Navbar from 'react-bootstrap/Navbar';\n// import Nav from 'react-bootstrap/Nav';\n\nimport Home from './Home';\n\nimport AltaTerminal from './AltaTerminal';\n\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Router basename='/alta_ie_v0'>\n          <div className=\"nav\">\n            <NavLink to=\"/terminal\" className=\"custom-link\" activeClassName=\"custom-link-active\">terminal</NavLink>\n            <NavLink exact to=\"/\" className=\"custom-link\" activeClassName=\"custom-link-active\">info</NavLink>\n          </div>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/terminal\">\n              <AltaTerminal />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}